package com.snowflake.snowpark_java;

import static com.snowflake.snowpark.internal.OpenTelemetry.javaUDF;

import com.snowflake.snowpark.internal.JavaDataTypeUtils;
import com.snowflake.snowpark.internal.JavaUtils;
import com.snowflake.snowpark.internal.ScalaFunctions;
import com.snowflake.snowpark_java.types.DataType;
import com.snowflake.snowpark_java.udf.*;
import java.util.function.Supplier;

/**
 * Provides methods to register lambdas and functions as UDFs in the Snowflake database. {@code
 * Session.udf()} returns an object of this class.
 *
 * @since 0.12.0
 */
public class UDFRegistration {
  private final com.snowflake.snowpark.UDFRegistration udf;

  UDFRegistration(com.snowflake.snowpark.UDFRegistration udf) {
    this.udf = udf;
  }

  //  Code below for registerTemporary 0-22 generated by this script

  //  (0 to 22).foreach { x =>
  //    val types = (1 to x).foldLeft("?")((i, _) => {s"$i, ?"})
  //    val (input, doc) = x match {
  //      case 0 => ("", "")
  //      case 1 => (" DataType input,", "@param input the UDF input {@code types.DataType}")
  //      case _ => (" DataType[] input,", "@param input the UDF input {@code types.DataType}s")
  //    }
  //    val s = if(x > 1) "s" else ""
  //    val arg = if(x > 0) " convertDataType(input)," else ""
  //    println(s"""
  //      |/**
  //      | * Registers a Java Lambda of $x argument$s as a temporary anonymous UDF that is
  //      | * scoped to this session.
  //      | *
  //      | * @since 0.12.0
  //      | * @param func the Java Lambda to be registered.
  //      | * $doc
  //      | * @param output the UDF return {@code types.DataType}
  //      | * @return The result UserDefinedFunction reference
  //      | */
  //      |public UserDefinedFunction registerTemporary(JavaUDF$x<$types> func,$input DataType
  // output) {
  //      |  return udf("registerTemporary", () -> new UserDefinedFunction(
  //      |    JavaUtils.registerUDF(
  //      |      udf,
  //      |      null,
  //      |      ScalaFunctions._toUdf(func,$arg convertDataType(output)),
  //      |      null)));
  //      |}""".stripMargin)
  //  }

  /**
   * Registers a Java Lambda of 0 argument as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(JavaUDF0<?> func, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf, null, ScalaFunctions._toUdf(func, convertDataType(output)), null)));
  }

  /**
   * Registers a Java Lambda of 1 argument as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF1<?, ?> func, DataType input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 2 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF2<?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 3 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF3<?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 4 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF4<?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 5 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF5<?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 6 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF6<?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 7 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF7<?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 8 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF8<?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 9 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF9<?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 10 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 11 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF11<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 12 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF12<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 13 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF13<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 14 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF14<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 15 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF15<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 16 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF16<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 17 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF17<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 18 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF18<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 19 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF19<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 20 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF20<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 21 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF21<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 22 arguments as a temporary anonymous UDF that is scoped to this
   * session.
   *
   * @since 0.12.0
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      JavaUDF22<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    null,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  //  Code below for registerTemporary 0-22 generated by this script

  //  (0 to 22).foreach { x =>
  //    val types = (1 to x).foldLeft("?")((i, _) => {s"$i, ?"})
  //    val (input, doc) = x match {
  //      case 0 => ("", "")
  //      case 1 => (" DataType input,", "@param input the UDF input {@code types.DataType}")
  //      case _ => (" DataType[] input,", "@param input the UDF input {@code types.DataType}s")
  //    }
  //    val s = if(x > 1) "s" else ""
  //    val arg = if(x > 0) " convertDataType(input)," else ""
  //    println(s"""
  //    |/**
  //    | * Registers a Java Lambda of $x argument$s as a temporary UDF that is
  //    | * scoped to this session.
  //    | *
  //    | * @since 0.12.0
  //    | * @param name the name temporary udf being registered.
  //    | * @param func the Java Lambda to be registered.
  //    | * $doc
  //    | * @param output the UDF return {@code types.DataType}
  //    | * @return The result UserDefinedFunction reference
  //    | */
  //    |public UserDefinedFunction registerTemporary(String name, JavaUDF$x<$types> func,
  //    |$input DataType output) {
  //    |  return udf("registerTemporary", name, () -> new UserDefinedFunction(
  //    |    JavaUtils.registerUDF(
  //    |      udf,
  //    |      name,
  //    |      ScalaFunctions._toUdf(func,$arg convertDataType(output)),
  //    |      null)));
  //    |}""".stripMargin)
  //  }

  /**
   * Registers a Java Lambda of 0 argument as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(String name, JavaUDF0<?> func, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf, name, ScalaFunctions._toUdf(func, convertDataType(output)), null)));
  }

  /**
   * Registers a Java Lambda of 1 argument as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF1<?, ?> func, DataType input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 2 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF2<?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 3 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF3<?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 4 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF4<?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 5 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF5<?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 6 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF6<?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 7 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF7<?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 8 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF8<?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 9 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name, JavaUDF9<?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func, DataType[] input, DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 10 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 11 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF11<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 12 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF12<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 13 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF13<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 14 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF14<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 15 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF15<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 16 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF16<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 17 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF17<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 18 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF18<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 19 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF19<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 20 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF20<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 21 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF21<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 22 arguments as a temporary UDF that is scoped to this session.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerTemporary(
      String name,
      JavaUDF22<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output) {
    return udf(
        "registerTemporary",
        name,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    null)));
  }

  //  Code below for registerPermanent 0-22 generated by this script

  //  (0 to 22).foreach { x =>
  //    val types = (1 to x).foldLeft("?")((i, _) => {s"$i, ?"})
  //    val (input, doc) = x match {
  //      case 0 => ("", "")
  //      case 1 => (" DataType input,", "@param input the UDF input {@code types.DataType}")
  //      case _ => (" DataType[] input,", "@param input the UDF input {@code types.DataType}s")
  //    }
  //    val s = if(x > 1) "s" else ""
  //    val arg = if(x > 0) " convertDataType(input)," else ""
  //    println(s"""
  //    |/**
  //    | * Registers a Java Lambda of $x argument as a Snowflake Java UDF.
  //    | *
  //    | * The function uploads the JAR files that the UDF depends upon to the specified stage.
  //    | * Each JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
  //    | *
  //    | * If you register multiple UDFs and specify the same stage location, any dependent JAR
  //    | * files used by those functions will only be uploaded once. The JAR file for the UDF code
  //    | * itself will be uploaded to a subdirectory named after the UDF.
  //    | *
  //    | * @since 0.12.0
  //    | * @param name the name temporary udf being registered.
  //    | * @param func the Java Lambda to be registered.
  //    | * $doc
  //    | * @param output the UDF return {@code types.DataType}
  //    | * @param stageLocation a stage location that udf jar files being uploaded to.
  //    | * @return The result UserDefinedFunction reference
  //    | */
  //    |public UserDefinedFunction registerPermanent(
  //    |  String name,
  //    |  JavaUDF$x<$types> func,$input
  //    |  DataType output,
  //    |  String stageLocation
  //    |){
  //    |  return udf("registerPermanent", name, stageLocation, () -> new UserDefinedFunction(
  //    |    JavaUtils.registerUDF(
  //    |      udf,
  //    |      name,
  //    |      ScalaFunctions._toUdf(func,$arg convertDataType(output)),
  //    |      stageLocation
  //    |    )));
  //    |}""".stripMargin)
  //  }

  /**
   * Registers a Java Lambda of 0 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name, JavaUDF0<?> func, DataType output, String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 1 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name, JavaUDF1<?, ?> func, DataType input, DataType output, String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 2 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF2<?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 3 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF3<?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 4 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF4<?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 5 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF5<?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 6 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF6<?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 7 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF7<?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 8 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF8<?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 9 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF9<?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 10 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 11 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF11<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 12 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF12<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 13 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF13<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 14 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF14<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 15 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF15<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 16 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF16<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 17 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF17<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 18 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF18<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 19 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF19<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 20 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF20<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 21 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF21<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  /**
   * Registers a Java Lambda of 22 argument as a Snowflake Java UDF.
   *
   * <p>The function uploads the JAR files that the UDF depends upon to the specified stage. Each
   * JAR file is uploaded to a subdirectory named after the MD5 checksum for the file.
   *
   * <p>If you register multiple UDFs and specify the same stage location, any dependent JAR files
   * used by those functions will only be uploaded once. The JAR file for the UDF code itself will
   * be uploaded to a subdirectory named after the UDF.
   *
   * @since 0.12.0
   * @param name the name temporary udf being registered.
   * @param func the Java Lambda to be registered.
   * @param input the UDF input {@code types.DataType}s
   * @param output the UDF return {@code types.DataType}
   * @param stageLocation a stage location that udf jar files being uploaded to.
   * @return The result UserDefinedFunction reference
   */
  public UserDefinedFunction registerPermanent(
      String name,
      JavaUDF22<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> func,
      DataType[] input,
      DataType output,
      String stageLocation) {
    return udf(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new UserDefinedFunction(
                JavaUtils.registerUDF(
                    udf,
                    name,
                    ScalaFunctions._toUdf(func, convertDataType(input), convertDataType(output)),
                    stageLocation)));
  }

  static com.snowflake.snowpark.types.DataType convertDataType(DataType javaType) {
    return JavaDataTypeUtils.javaTypeToScalaType(javaType);
  }

  static com.snowflake.snowpark.types.DataType[] convertDataType(DataType[] javaTypes) {
    com.snowflake.snowpark.types.DataType[] result =
        new com.snowflake.snowpark.types.DataType[javaTypes.length];
    for (int i = 0; i < javaTypes.length; i++) {
      result[i] = convertDataType(javaTypes[i]);
    }
    return result;
  }

  private UserDefinedFunction udf(
      String funcName, String execName, String execFilePath, Supplier<UserDefinedFunction> func) {
    return javaUDF("UDFRegistration", funcName, execName, execFilePath, 0, func);
  }

  private UserDefinedFunction udf(
      String funcName, String execName, Supplier<UserDefinedFunction> func) {
    return javaUDF("UDFRegistration", funcName, execName, "", 0, func);
  }

  private UserDefinedFunction udf(String funcName, Supplier<UserDefinedFunction> func) {
    return javaUDF("UDFRegistration", funcName, "", "", 0, func);
  }
}
