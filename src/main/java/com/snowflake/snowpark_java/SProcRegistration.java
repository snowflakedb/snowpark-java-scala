package com.snowflake.snowpark_java;

import static com.snowflake.snowpark.internal.OpenTelemetry.javaSProc;

import com.snowflake.snowpark.PublicPreview;
import com.snowflake.snowpark.internal.ErrorMessage;
import com.snowflake.snowpark.internal.JavaUtils;
import com.snowflake.snowpark.internal.ScalaFunctions;
import com.snowflake.snowpark_java.internal.JavaSProc;
import com.snowflake.snowpark_java.sproc.*;
import com.snowflake.snowpark_java.types.DataType;
import java.util.function.Supplier;

/**
 * Provides methods to register a SProc (Stored Procedure) in the Snowflake database.
 *
 * <p>{@code Session.sproc()} returns an object ot this class.
 *
 * <p>To register anonymous temporary SProcs with work in the current session:
 *
 * <pre>{@code
 * StoredProcedure sp =
 *   session.sproc().registerTemporary((Session session, Integer num) -> num + 1,
 *     DataTypes.IntegerType, DataTypes.IntegerType);
 * session.storedProcedure(sp, 1).show();
 * }</pre>
 *
 * To register named temporary SProcs with work in the current session:
 *
 * <pre>{@code
 * String name = "sproc";
 * StoredProcedure sp =
 *   session.sproc().registerTemporary(name, (Session session, Integer num) -> num + 1,
 *     DataTypes.IntegerType, DataTypes.IntegerType);
 * session.storedProcedure(sp, 1).show();
 * session.storedProcedure(name, 1).show();
 * }</pre>
 *
 * It requires a user stage when registering a permanent SProc. Snowpark will upload all JAR files
 * for the SProc and any dependencies. It is also required to specify Owner or Caller modes via the
 * parameter `isCallerMode`.
 *
 * <pre>{@code
 * String name = "sproc";
 * String stageName = "stage";
 * StoredProcedure sp =
 *   session.sproc().registerPermanent(
 *     name,
 *     (Session session, Integer col1) -> col1 + 100,
 *     DataTypes.IntegerType,
 *     DataTypes.IntegerType,
 *     stageName,
 *     true
 *   );
 *  session.storedProcedure(sp, 1).show();
 *  session.storedProcedure(name, 1).show();
 * }</pre>
 *
 * This object also provides a convenient methods to execute SProc lambda functions directly with
 * current session on the client side. The functions are designed for debuging and development only.
 * Since the local and Snowflake server environments are different, the outputs of executing a SP
 * function with these test function and on Snowflake server may be different too.
 *
 * <pre>{@code
 * JavaSproc1<Integer, Integer> func =
 *   (Session session, Integer col1) -> col1 + 100;
 * StoredProcedure sp =
 *   session.sproc().registerTemporary(func, DataTypes.IntegerType, DataTypes.IntegerType);
 * int localResult = (Integer) session.sproc().runLocally(func, 1);
 * DataFrame resultDF = session.storedProcedure(sp, 1);
 * }</pre>
 *
 * @since 1.8.0
 */
public class SProcRegistration {
  private final com.snowflake.snowpark.SProcRegistration sproc;
  private final Session session;

  SProcRegistration(Session session, com.snowflake.snowpark.SProcRegistration sproc) {
    this.session = session;
    this.sproc = sproc;
  }

  //  Code below for registerPermanent 0-21 generated by this script
  //    (0 to 21).foreach { x =>
  //    val types = (1 to x).foldLeft("?")((i, _) => {s"$i, ?"})
  //    val (input, doc) = x match {
  //      case 0 => ("", "")
  //      case 1 => (" DataType input,", "@param input the SProc input {@code types.DataType}")
  //      case _ => (" DataType[] input,", "@param input the SProc input {@code types.DataType}s")
  //    }
  //    val s = if (x > 1) "s" else ""
  //    val arg = if (x > 0) " UDFRegistration.convertDataType(input)," else ""
  //    println(s"""
  //                 |/**
  //                 | * Registers a Java Lambda of $x argument$s as a temporary named Stored
  // Procedure that is
  //                 | * scoped to this session.
  //                 | *
  //                 | * @since 1.8.0
  //                 | * @param name the name of the temporary stored procedure being registered.
  //                 | * @param sp the Java Lambda to be registered.
  //                 | * $doc
  //                 | * @param output the SProc return {@code types.DataType}
  //                 | * @return The result StoredProcedure reference
  //                 | */
  //                 |@PublicPreview
  //                 |public StoredProcedure registerTemporary(String name,
  //                 |  JavaSProc$x<$types> sp,$input DataType output) {
  //                 |  return sproc("registerTemporary", name, () -> new StoredProcedure(
  //                 |    JavaUtils.registerJavaSProc(
  //                 |      sproc,
  //                 |      name,
  //                 |      ScalaFunctions._toSProc(sp,$arg
  // UDFRegistration.convertDataType(output)),
  //                 |      null)));
  //                 |}""".stripMargin)
  //  }

  /**
   * Registers a Java Lambda of 0 argument as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name, JavaSProc0<?> sp, DataType output, String stageLocation, boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(sp, UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 1 argument as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc1<?, ?> sp,
      DataType input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 2 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc2<?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 3 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc3<?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 4 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc4<?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 5 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc5<?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 6 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc6<?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 7 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc7<?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 8 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc8<?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 9 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc9<?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 10 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 11 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc11<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 12 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc12<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 13 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc13<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 14 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc14<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 15 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc15<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 16 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc16<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 17 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc17<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 18 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc18<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 19 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc19<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 20 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc20<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  /**
   * Registers a Java Lambda of 21 arguments as a permanent Snowflake Stored Procedure.
   *
   * <p>The function uploads the JAR files that the stored procedure depdends upon to the specified
   * stage.
   *
   * @since 1.8.0
   * @param name the name of the stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @param stageLocation a stage location that stored procedure jar files being uploaded to.
   * @param isCallerMode true if the stored procedure is under caller mode.
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerPermanent(
      String name,
      JavaSProc21<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output,
      String stageLocation,
      boolean isCallerMode) {
    return sproc(
        "registerPermanent",
        name,
        stageLocation,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    stageLocation,
                    isCallerMode)));
  }

  //  Code below for registerTemporary 0-21 generated by this script
  //  (0 to 21).foreach { x =>
  //    val types = (1 to x).foldLeft("?")((i, _) => {s"$i, ?"})
  //    val (input, doc) = x match {
  //      case 0 => ("", "")
  //      case 1 => (" DataType input,", "@param input the SProc input {@code types.DataType}")
  //      case _ => (" DataType[] input,", "@param input the SProc input {@code types.DataType}s")
  //    }
  //    val s = if(x > 1) "s" else ""
  //    val arg = if(x > 0) " UDFRegistration.convertDataType(input)," else ""
  //    println(s"""
  //    |/**
  //    | * Registers a Java Lambda of $x argument$s as a temporary anonymous Stored Procedure that
  // is
  //    | * scoped to this session.
  //    | *
  //    | * @since 1.8.0
  //    | * @param sp the Java Lambda to be registered.
  //    | * $doc
  //    | * @param output the SProc return {@code types.DataType}
  //    | * @return The result StoredProcedure reference
  //    | */
  //    |public StoredProcedure registerTemporary(JavaSProc$x<$types> sp,$input DataType output) {
  //    |  return sproc("registerTemporary", () -> new StoredProcedure(
  //    |    JavaUtils.registerJavaSProc(
  //    |      sproc,
  //    |      null,
  //    |      ScalaFunctions._toSProc(sp,$arg UDFRegistration.convertDataType(output)),
  //    |      null)));
  //    |}""".stripMargin)
  //  }

  /**
   * Registers a Java Lambda of 0 argument as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(JavaSProc0<?> sp, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(sp, UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 1 argument as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(JavaSProc1<?, ?> sp, DataType input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 2 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc2<?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 3 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc3<?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 4 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc4<?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 5 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc5<?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 6 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc6<?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 7 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc7<?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 8 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc8<?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 9 arguments as a temporary anonymous Stored Procedure that is scoped
   * to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc9<?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 10 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 11 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc11<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 12 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc12<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 13 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc13<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 14 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc14<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 15 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc15<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 16 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc16<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 17 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc17<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 18 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc18<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 19 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc19<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 20 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc20<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 21 arguments as a temporary anonymous Stored Procedure that is
   * scoped to this session.
   *
   * @since 1.8.0
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      JavaSProc21<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    null,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  //  Code below for registerTemporary 0-21 generated by this script
  //    (0 to 21).foreach { x =>
  //    val types = (1 to x).foldLeft("?")((i, _) => {s"$i, ?"})
  //    val (input, doc) = x match {
  //      case 0 => ("", "")
  //      case 1 => (" DataType input,", "@param input the SProc input {@code types.DataType}")
  //      case _ => (" DataType[] input,", "@param input the SProc input {@code types.DataType}s")
  //    }
  //    val s = if (x > 1) "s" else ""
  //    val arg = if (x > 0) " UDFRegistration.convertDataType(input)," else ""
  //    println(s"""
  //                 |/**
  //                 | * Registers a Java Lambda of $x argument$s as a temporary named Stored
  // Procedure that is
  //                 | * scoped to this session.
  //                 | *
  //                 | * @since 1.8.0
  //                 | * @param name the name of the temporary stored procedure being registered.
  //                 | * @param sp the Java Lambda to be registered.
  //                 | * $doc
  //                 | * @param output the SProc return {@code types.DataType}
  //                 | * @return The result StoredProcedure reference
  //                 | */
  //                 |public StoredProcedure registerTemporary(String name,
  //                 |  JavaSProc$x<$types> sp,$input DataType output) {
  //                 |  return sproc("registerTemporary", name, () -> new StoredProcedure(
  //                 |    JavaUtils.registerJavaSProc(
  //                 |      sproc,
  //                 |      name,
  //                 |      ScalaFunctions._toSProc(sp,$arg
  // UDFRegistration.convertDataType(output)),
  //                 |      null)));
  //                 |}""".stripMargin)
  //  }

  /**
   * Registers a Java Lambda of 0 argument as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(String name, JavaSProc0<?> sp, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(sp, UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 1 argument as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc1<?, ?> sp, DataType input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 2 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc2<?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 3 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc3<?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 4 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc4<?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 5 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc5<?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 6 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc6<?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 7 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc7<?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 8 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc8<?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 9 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name, JavaSProc9<?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp, DataType[] input, DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 10 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 11 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc11<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 12 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc12<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 13 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc13<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 14 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc14<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 15 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc15<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 16 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc16<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 17 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc17<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 18 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc18<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 19 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc19<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 20 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc20<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Registers a Java Lambda of 21 arguments as a temporary named Stored Procedure that is scoped to
   * this session.
   *
   * @since 1.8.0
   * @param name the name of the temporary stored procedure being registered.
   * @param sp the Java Lambda to be registered.
   * @param input the SProc input {@code types.DataType}s
   * @param output the SProc return {@code types.DataType}
   * @return The result StoredProcedure reference
   */
  public StoredProcedure registerTemporary(
      String name,
      JavaSProc21<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> sp,
      DataType[] input,
      DataType output) {
    return sproc(
        "registerTemporary",
        name,
        () ->
            new StoredProcedure(
                JavaUtils.registerJavaSProc(
                    sproc,
                    name,
                    ScalaFunctions._toSProc(
                        sp,
                        UDFRegistration.convertDataType(input),
                        UDFRegistration.convertDataType(output)),
                    null)));
  }

  /**
   * Executes a Stored Procedure lambda function with current Snowpark session in the local
   * environment. This is a test function and used for debugging and development only. Since the
   * local and Snowflake server environments are different, the outputs of executing a SP function
   * with this test function and on Snowflake server may be different too.
   *
   * @since 1.8.0
   * @param sproc a Java Stored Procedure lambda
   * @param args the arguments of this stored procedure
   * @return the result of stored procedure.
   */
  @PublicPreview
  public Object runLocally(JavaSProc sproc, Object... args) {
    if (sproc instanceof JavaSProc0<?>) {
      int expectedArgsNumber = 0;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc0<?>) sproc).call(session);
    } else if (sproc instanceof JavaSProc1<?, ?>) {
      int expectedArgsNumber = 1;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc1<Object, ?>) sproc).call(session, args[0]);
    } else if (sproc instanceof JavaSProc2<?, ?, ?>) {
      int expectedArgsNumber = 2;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc2<Object, Object, ?>) sproc).call(session, args[0], args[1]);
    } else if (sproc instanceof JavaSProc3<?, ?, ?, ?>) {
      int expectedArgsNumber = 3;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc3<Object, Object, Object, ?>) sproc)
          .call(session, args[0], args[1], args[2]);
    } else if (sproc instanceof JavaSProc4<?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 4;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc4<Object, Object, Object, Object, ?>) sproc)
          .call(session, args[0], args[1], args[2], args[3]);
    } else if (sproc instanceof JavaSProc5<?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 5;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc5<Object, Object, Object, Object, Object, ?>) sproc)
          .call(session, args[0], args[1], args[2], args[3], args[4]);
    } else if (sproc instanceof JavaSProc6<?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 6;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc6<Object, Object, Object, Object, Object, Object, ?>) sproc)
          .call(session, args[0], args[1], args[2], args[3], args[4], args[5]);
    } else if (sproc instanceof JavaSProc7<?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 7;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc7<Object, Object, Object, Object, Object, Object, Object, ?>) sproc)
          .call(session, args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    } else if (sproc instanceof JavaSProc8<?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 8;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc8<Object, Object, Object, Object, Object, Object, Object, Object, ?>) sproc)
          .call(session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
    } else if (sproc instanceof JavaSProc9<?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 9;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc9<
                  Object, Object, Object, Object, Object, Object, Object, Object, Object, ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8]);
    } else if (sproc instanceof JavaSProc10<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 10;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc10<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9]);
    } else if (sproc instanceof JavaSProc11<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 11;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc11<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10]);
    } else if (sproc instanceof JavaSProc12<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 12;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc12<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11]);
    } else if (sproc instanceof JavaSProc13<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 13;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc13<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12]);
    } else if (sproc instanceof JavaSProc14<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 14;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc14<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13]);
    } else if (sproc instanceof JavaSProc15<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 15;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc15<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13], args[14]);
    } else if (sproc instanceof JavaSProc16<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 16;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc16<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15]);
    } else if (sproc instanceof JavaSProc17<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 17;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc17<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15],
              args[16]);
    } else if (sproc
        instanceof JavaSProc18<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 18;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc18<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15],
              args[16], args[17]);
    } else if (sproc
        instanceof JavaSProc19<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 19;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc19<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15],
              args[16], args[17], args[18]);
    } else if (sproc
        instanceof JavaSProc20<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 20;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc20<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15],
              args[16], args[17], args[18], args[19]);
    } else if (sproc
        instanceof JavaSProc21<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>) {
      int expectedArgsNumber = 21;
      if (args.length != expectedArgsNumber) {
        throw ErrorMessage.UDF_INCORRECT_SPROC_ARGS_NUMBER(expectedArgsNumber, args.length);
      }
      return ((JavaSProc21<
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  Object,
                  ?>)
              sproc)
          .call(
              session, args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7],
              args[8], args[9], args[10], args[11], args[12], args[13], args[14], args[15],
              args[16], args[17], args[18], args[19], args[20]);
    }
    throw new UnsupportedOperationException("Unsupported Java SProc Type");
  }

  private StoredProcedure sproc(
      String funcName, String execName, String execFilePath, Supplier<StoredProcedure> func) {
    return javaSProc("SProcRegistration", funcName, execName, execFilePath, func);
  }

  private StoredProcedure sproc(String funcName, String execName, Supplier<StoredProcedure> func) {
    return javaSProc("SProcRegistration", funcName, execName, "", func);
  }

  private StoredProcedure sproc(String funcName, Supplier<StoredProcedure> func) {
    return javaSProc("SProcRegistration", funcName, "", "", func);
  }
}
