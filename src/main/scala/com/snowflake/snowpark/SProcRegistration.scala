package com.snowflake.snowpark

import com.snowflake.snowpark.internal.{OpenTelemetry, UDXRegistrationHandler}

import scala.reflect.runtime.universe.TypeTag
import com.snowflake.snowpark.internal.ScalaFunctions._

// scalastyle:off
/**
 * Provides methods to register a SProc (Stored Procedure) in the Snowflake database.
 *
 * [[Session.sproc]] returns an object of this class.
 *
 * To register anonymous temporary SProcs which work in the current session:
 * {{{
 *   val sp = session.sproc.registerTemporary((session: Session, num: Int) => s"num: $num")
 *   session.storedProcedure(sp, 123)
 * }}}
 *
 * To register named temporary SProcs which work in the current session:
 * {{{
 *   val name = "sproc"
 *   val sp = session.sproc.registerTemporary(name,
 *     (session: Session, num: Int) => s"num: $num")
 *   session.storedProcedure(sp, 123)
 *   session.storedProcedure(name, 123)
 * }}}
 *
 * It requires a user stage when registering a permanent SProc. Snowpark will upload all
 * JAR files for the SProc and any dependencies. It is also required to specify Owner or
 * Caller modes via the parameter 'isCallerMode'.
 * {{{
 *   val name = "sproc"
 *   val stageName = "<a user stage name>"
 *   val sp = session.sproc.registerPermanent(name,
 *     (session: Session, num: Int) => s"num: $num",
 *     stageName,
 *     isCallerMode = true)
 *   session.storedProcedure(sp, 123)
 *   session.storedProcedure(name, 123)
 * }}}
 *
 * This object also provides a convenient methods to execute SProc lambda functions directly
 * with current session on the client side. The functions are designed for debugging and
 * development only. Since the local and Snowflake server environments are different, the outputs
 * of executing a SP function with these test function and on Snowflake server may be different too.
 * {{{
 *   // a client side Scala lambda
 *   val func = (session: Session, num: Int) => s"num: $num"
 *   // register a server side stored procedure
 *   val sp = session.sproc.registerTemporary(func)
 *   // execute the lambda function of this SP from the client side
 *   val localResult = session.sproc.runLocally(func, 123)
 *   // execute this SP from the server side
 *   val resultDF = session.storedProcedure(sp, 123)
 * }}}
 *
 * @since 1.8.0
 */
// scalastyle:on
class SProcRegistration(session: Session) {

  private[snowpark] val handler = new UDXRegistrationHandler(session)

  // scalastyle:off line.size.limit
  /* Code below for registerPermanent 0 - 21 generated by this script
   * (0 to 21).foreach { x =>
   *   val types = (1 to x).foldRight("RT")((i, s) => {s"A$i, $s"})
   *   val typeTags = (1 to x).map(i => s"A$i: TypeTag").foldLeft("RT: TypeTag")(_ + ", " + _)
   *   println(s"""
   *     |/**
   *     | * Registers a Scala closure of $x arguments as a permanent Stored Procedure.
   *     | *
   *     | * @tparam RT Return type of the UDF.
   *     | */
   *     |def registerPermanent[$typeTags](name: String, sp: Function${x + 1}[Session, $types],
   *     |  stageLocation: String, isCallerMode: Boolean): StoredProcedure =
   *     |  sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
   *     |  register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
   *     |}""".stripMargin)
   * }
   */
  // scalastyle:on line.size.limit

  /**
   * Registers a Scala closure of 0 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[RT: TypeTag](
      name: String,
      sp: Function1[Session, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 1 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[RT: TypeTag, A1: TypeTag](
      name: String,
      sp: Function2[Session, A1, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 2 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[RT: TypeTag, A1: TypeTag, A2: TypeTag](
      name: String,
      sp: Function3[Session, A1, A2, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 3 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag](
      name: String,
      sp: Function4[Session, A1, A2, A3, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 4 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag, A4: TypeTag](
      name: String,
      sp: Function5[Session, A1, A2, A3, A4, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 5 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag](
      name: String,
      sp: Function6[Session, A1, A2, A3, A4, A5, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 6 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag](
      name: String,
      sp: Function7[Session, A1, A2, A3, A4, A5, A6, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 7 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag](
      name: String,
      sp: Function8[Session, A1, A2, A3, A4, A5, A6, A7, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 8 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag](
      name: String,
      sp: Function9[Session, A1, A2, A3, A4, A5, A6, A7, A8, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 9 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag](
      name: String,
      sp: Function10[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 10 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag](
      name: String,
      sp: Function11[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 11 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag](
      name: String,
      sp: Function12[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 12 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag](
      name: String,
      sp: Function13[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 13 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag](
      name: String,
      sp: Function14[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 14 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag](
      name: String,
      sp: Function15[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 15 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag](
      name: String,
      sp: Function16[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 16 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag](
      name: String,
      sp: Function17[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 17 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag](
      name: String,
      sp: Function18[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 18 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag](
      name: String,
      sp: Function19[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 19 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag](
      name: String,
      sp: Function20[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 20 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag](
      name: String,
      sp: Function21[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  /**
   * Registers a Scala closure of 21 arguments as a permanent Stored Procedure.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerPermanent[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag,
      A21: TypeTag](
      name: String,
      sp: Function22[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        A21,
        RT],
      stageLocation: String,
      isCallerMode: Boolean): StoredProcedure =
    sproc("registerPermanent", execName = name, execFilePath = stageLocation) {
      register(Some(name), _toSP(sp), Some(stageLocation), isCallerMode)
    }

  // scalastyle:off line.size.limit
  /* Code below for registerTemporary 0 - 21 generated by this script
   * (0 to 21).foreach { x =>
   * val types = (1 to x).foldRight("RT")((i, s) => {s"A$i, $s"})
   * val typeTags = (1 to x).map(i => s"A$i: TypeTag").foldLeft("RT: TypeTag")(_ + ", " + _)
   * println(s"""
   *   |/**
   *   | * Registers a Scala closure of $x arguments as a temporary Stored Procedure that is
   *   | * scoped to this session.
   *   | *
   *   | * @tparam RT Return type of the UDF.
   *   | */
   *   |def registerTemporary[$typeTags](sp: Function${x + 1}[Session, $types]): StoredProcedure =
   *   | sproc("registerTemporary") {
   *   |  register(None, _toSP(sp))
   *   |}""".stripMargin)
   * }
   */
  // scalastyle:on line.size.limit

  /**
   * Registers a Scala closure of 0 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag](sp: Function1[Session, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 1 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag](
      sp: Function2[Session, A1, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 2 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag, A2: TypeTag](
      sp: Function3[Session, A1, A2, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 3 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag](
      sp: Function4[Session, A1, A2, A3, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 4 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag, A4: TypeTag](
      sp: Function5[Session, A1, A2, A3, A4, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 5 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag](sp: Function6[Session, A1, A2, A3, A4, A5, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 6 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag](sp: Function7[Session, A1, A2, A3, A4, A5, A6, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 7 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag](sp: Function8[Session, A1, A2, A3, A4, A5, A6, A7, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 8 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag](sp: Function9[Session, A1, A2, A3, A4, A5, A6, A7, A8, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 9 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag](
      sp: Function10[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 10 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag](
      sp: Function11[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 11 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag](sp: Function12[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, RT])
    : StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 12 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag](
      sp: Function13[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, RT])
    : StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 13 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag](
      sp: Function14[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, RT])
    : StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 14 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag](
      sp: Function15[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, RT])
    : StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 15 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag](
      sp: Function16[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 16 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag](
      sp: Function17[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 17 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag](
      sp: Function18[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 18 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag](
      sp: Function19[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 19 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag](
      sp: Function20[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 20 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag](
      sp: Function21[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  /**
   * Registers a Scala closure of 21 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag,
      A21: TypeTag](
      sp: Function22[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        A21,
        RT]): StoredProcedure =
    sproc("registerTemporary") {
      register(None, _toSP(sp))
    }

  // scalastyle:off line.size.limit
  /* Code below for registerTemporary 0 - 21 generated by this script
   (0 to 21).foreach { x =>
     val types = (1 to x).foldRight("RT")((i, s) => {s"A$i, $s"})
     val typeTags = (1 to x).map(i => s"A$i: TypeTag").foldLeft("RT: TypeTag")(_ + ", " + _)
     println(s"""
       |/**
       | * Registers a Scala closure of $x arguments as a temporary Stored Procedure that is
       | * scoped to this session.
       | *
       | * @tparam RT Return type of the UDF.
       | */
       |def registerTemporary[$typeTags](name: String, sp: Function${x + 1}[Session, $types]): StoredProcedure =
       | sproc("registerTemporary", execName = name) {
       |  register(Some(name), _toSP(sp))
       |}""".stripMargin)
     }
   */
  // scalastyle:on line.size.limit

  /**
   * Registers a Scala closure of 0 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag](name: String, sp: Function1[Session, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 1 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag](
      name: String,
      sp: Function2[Session, A1, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 2 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag, A2: TypeTag](
      name: String,
      sp: Function3[Session, A1, A2, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 3 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag](
      name: String,
      sp: Function4[Session, A1, A2, A3, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 4 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag, A4: TypeTag](
      name: String,
      sp: Function5[Session, A1, A2, A3, A4, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 5 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag](
      name: String,
      sp: Function6[Session, A1, A2, A3, A4, A5, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 6 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag](
      name: String,
      sp: Function7[Session, A1, A2, A3, A4, A5, A6, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 7 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag](
      name: String,
      sp: Function8[Session, A1, A2, A3, A4, A5, A6, A7, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 8 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag](
      name: String,
      sp: Function9[Session, A1, A2, A3, A4, A5, A6, A7, A8, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 9 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag](
      name: String,
      sp: Function10[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 10 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag](
      name: String,
      sp: Function11[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 11 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag](
      name: String,
      sp: Function12[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, RT])
    : StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 12 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag](
      name: String,
      sp: Function13[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, RT])
    : StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 13 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag](
      name: String,
      sp: Function14[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, RT])
    : StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 14 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag](
      name: String,
      sp: Function15[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, RT])
    : StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 15 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag](
      name: String,
      sp: Function16[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 16 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag](
      name: String,
      sp: Function17[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 17 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag](
      name: String,
      sp: Function18[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 18 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag](
      name: String,
      sp: Function19[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 19 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag](
      name: String,
      sp: Function20[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 20 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag](
      name: String,
      sp: Function21[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  /**
   * Registers a Scala closure of 21 arguments as a temporary Stored Procedure that is
   * scoped to this session.
   *
   * @tparam RT Return type of the UDF.
   */
  def registerTemporary[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag,
      A21: TypeTag](
      name: String,
      sp: Function22[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        A21,
        RT]): StoredProcedure =
    sproc("registerTemporary", execName = name) {
      register(Some(name), _toSP(sp))
    }

  private[snowpark] def register(
      name: Option[String],
      sp: StoredProcedure,
      stageLocation: Option[String] = None,
      isCallerMode: Boolean = true): StoredProcedure =
    handler.registerSP(name, sp, stageLocation, isCallerMode)

  /**
   * Executes a Stored Procedure lambda function of 0 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[RT: TypeTag](sp: Function1[Session, RT]): RT = {
    sp.apply(this.session)
  }

  /**
   * Executes a Stored Procedure lambda function of 1 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[RT: TypeTag, A1: TypeTag](sp: Function2[Session, A1, RT], a1: A1): RT = {
    sp.apply(this.session, a1)
  }

  /**
   * Executes a Stored Procedure lambda function of 2 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[RT: TypeTag, A1: TypeTag, A2: TypeTag](
      sp: Function3[Session, A1, A2, RT],
      a1: A1,
      a2: A2): RT = {
    sp.apply(this.session, a1, a2)
  }

  /**
   * Executes a Stored Procedure lambda function of 3 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag](
      sp: Function4[Session, A1, A2, A3, RT],
      a1: A1,
      a2: A2,
      a3: A3): RT = {
    sp.apply(this.session, a1, a2, a3)
  }

  /**
   * Executes a Stored Procedure lambda function of 4 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag, A4: TypeTag](
      sp: Function5[Session, A1, A2, A3, A4, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4): RT = {
    sp.apply(this.session, a1, a2, a3, a4)
  }

  /**
   * Executes a Stored Procedure lambda function of 5 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[RT: TypeTag, A1: TypeTag, A2: TypeTag, A3: TypeTag, A4: TypeTag, A5: TypeTag](
      sp: Function6[Session, A1, A2, A3, A4, A5, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5)
  }

  /**
   * Executes a Stored Procedure lambda function of 6 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag](
      sp: Function7[Session, A1, A2, A3, A4, A5, A6, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6)
  }

  /**
   * Executes a Stored Procedure lambda function of 7 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag](
      sp: Function8[Session, A1, A2, A3, A4, A5, A6, A7, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7)
  }

  /**
   * Executes a Stored Procedure lambda function of 8 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag](
      sp: Function9[Session, A1, A2, A3, A4, A5, A6, A7, A8, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8)
  }

  /**
   * Executes a Stored Procedure lambda function of 9 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag](
      sp: Function10[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9)
  }

  /**
   * Executes a Stored Procedure lambda function of 10 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag](
      sp: Function11[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
  }

  /**
   * Executes a Stored Procedure lambda function of 11 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag](
      sp: Function12[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11)
  }

  /**
   * Executes a Stored Procedure lambda function of 12 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag](
      sp: Function13[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)
  }

  /**
   * Executes a Stored Procedure lambda function of 13 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag](
      sp: Function14[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13)
  }

  /**
   * Executes a Stored Procedure lambda function of 14 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag](
      sp: Function15[Session, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14)
  }

  /**
   * Executes a Stored Procedure lambda function of 15 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag](
      sp: Function16[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14,
      a15: A15): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15)
  }

  /**
   * Executes a Stored Procedure lambda function of 16 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag](
      sp: Function17[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14,
      a15: A15,
      a16: A16): RT = {
    sp.apply(this.session, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16)
  }

  /**
   * Executes a Stored Procedure lambda function of 17 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag](
      sp: Function18[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14,
      a15: A15,
      a16: A16,
      a17: A17): RT = {
    sp.apply(
      this.session,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17)
  }

  /**
   * Executes a Stored Procedure lambda function of 18 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag](
      sp: Function19[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14,
      a15: A15,
      a16: A16,
      a17: A17,
      a18: A18): RT = {
    sp.apply(
      this.session,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18)
  }

  /**
   * Executes a Stored Procedure lambda function of 19 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag](
      sp: Function20[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14,
      a15: A15,
      a16: A16,
      a17: A17,
      a18: A18,
      a19: A19): RT = {
    sp.apply(
      this.session,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19)
  }

  /**
   * Executes a Stored Procedure lambda function of 20 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag](
      sp: Function21[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14,
      a15: A15,
      a16: A16,
      a17: A17,
      a18: A18,
      a19: A19,
      a20: A20): RT = {
    sp.apply(
      this.session,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20)
  }

  /**
   * Executes a Stored Procedure lambda function of 21 arguments
   * with current Snowpark session in the local environment.
   * This is a test function and used for debugging and development only.
   * Since the local and Snowflake server environments are different,
   * the outputs of executing a SP function with this test function and
   * on Snowflake server may be different too.
   *
   * @tparam RT Return type of the UDF.
   */
  @PublicPreview
  def runLocally[
      RT: TypeTag,
      A1: TypeTag,
      A2: TypeTag,
      A3: TypeTag,
      A4: TypeTag,
      A5: TypeTag,
      A6: TypeTag,
      A7: TypeTag,
      A8: TypeTag,
      A9: TypeTag,
      A10: TypeTag,
      A11: TypeTag,
      A12: TypeTag,
      A13: TypeTag,
      A14: TypeTag,
      A15: TypeTag,
      A16: TypeTag,
      A17: TypeTag,
      A18: TypeTag,
      A19: TypeTag,
      A20: TypeTag,
      A21: TypeTag](
      sp: Function22[
        Session,
        A1,
        A2,
        A3,
        A4,
        A5,
        A6,
        A7,
        A8,
        A9,
        A10,
        A11,
        A12,
        A13,
        A14,
        A15,
        A16,
        A17,
        A18,
        A19,
        A20,
        A21,
        RT],
      a1: A1,
      a2: A2,
      a3: A3,
      a4: A4,
      a5: A5,
      a6: A6,
      a7: A7,
      a8: A8,
      a9: A9,
      a10: A10,
      a11: A11,
      a12: A12,
      a13: A13,
      a14: A14,
      a15: A15,
      a16: A16,
      a17: A17,
      a18: A18,
      a19: A19,
      a20: A20,
      a21: A21): RT = {
    sp.apply(
      this.session,
      a1,
      a2,
      a3,
      a4,
      a5,
      a6,
      a7,
      a8,
      a9,
      a10,
      a11,
      a12,
      a13,
      a14,
      a15,
      a16,
      a17,
      a18,
      a19,
      a20,
      a21)
  }

  @inline protected def sproc(funcName: String, execName: String = "", execFilePath: String = "")(
      func: => StoredProcedure): StoredProcedure = {
    OpenTelemetry.udx(
      "SProcRegistration",
      funcName,
      execName,
      s"${UDXRegistrationHandler.className}.${UDXRegistrationHandler.methodName}",
      execFilePath,
      0)(func)
  }
}
