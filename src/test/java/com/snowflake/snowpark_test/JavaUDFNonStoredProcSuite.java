package com.snowflake.snowpark_test;

import com.snowflake.snowpark_java.*;
import com.snowflake.snowpark_java.types.*;
import net.snowflake.client.jdbc.SnowflakeSQLException;
import org.junit.Test;

// This suite includes test case which can't be run in java stored proc
public class JavaUDFNonStoredProcSuite extends UDFTestBase {
  public JavaUDFNonStoredProcSuite() {}

  private boolean dependencyAdded = false;

  @Override
  public Session getSession() {
    Session session = super.getSession();
    if (!dependencyAdded) {
      dependencyAdded = true;
      addDepsToClassPath(session);
    }
    return session;
  }

  @Test(expected = SnowflakeSQLException.class)
  public void tempIsTemp() {
    String funcName = randomName();
    getSession().udf().registerTemporary(funcName, () -> 100, DataTypes.IntegerType);
    Session newSession = Session.builder().configFile(defaultProfile).create();
    // report error since not works in new session
    newSession.sql("select " + funcName + "()").show();
  }

  @Test
  public void permIsPerm() {
    String funcName = randomName();
    String stageName = randomName();
    Session newSession = Session.builder().configFile(defaultProfile).create();
    try {
      createStage(stageName, false);
      getSession().udf().registerPermanent(funcName, () -> 100, DataTypes.IntegerType, stageName);
      // should work
      assert newSession.sql("show functions like '" + funcName + "'").collect().length == 1;
    } finally {
      dropStage(stageName);
      getSession().sql("drop function " + funcName + "()").collect();
    }
  }

  @Test
  public void temporaryAnonymous0() {
    DataFrame df = getSession().sql("select * from values(1) as t(a)");
    UserDefinedFunction udf =
        getSession().udf().registerTemporary(() -> 100, DataTypes.IntegerType);
    assert df.select(udf.apply()).collect()[0].getInt(0) == 100;
  }

  //  Code below for test 1-22 generated by this script

  //  (1 to 22).foreach { x =>
  //    val data = (1 to x).map(i => s"$i").mkString(",")
  //    val colNames = (1 to x).map(i => s"a$i").mkString(",")
  //    val args = (1 to x).map(i => s"Integer col$i").mkString(", ")
  //    val func = (1 to x).map(i => s"col$i").mkString(""," + ", "+ 100")
  //    val input = (1 to x).map(_ => "DataTypes.IntegerType").mkString("{", ", ", "}")
  //    val types = x match {
  //      case 1 => "DataTypes.IntegerType"
  //      case _ => "input"
  //    }
  //    val select = (1 to x).map(i => s"""df.col("a$i")""").mkString(",")
  //    val result = 100 + (1 to x).reduce(_ + _)
  //    println(s"""
  //    |@Test
  //    |public void temporaryAnonymous$x() {
  //    | DataFrame df = session.sql("select * from values($data) as t($colNames)");
  //    | DataType[] input = $input;
  //    | UserDefinedFunction udf = session.udf()
  //    |   .registerTemporary(($args) -> $func, $types, DataTypes.IntegerType);
  //    | assert df.select(udf.apply($select)).collect()[0].getInt(0) == $result;
  //    |}""".stripMargin)
  //  }

  @Test
  public void temporaryAnonymous1() {
    DataFrame df = getSession().sql("select * from values(1) as t(a1)");
    DataType[] input = {DataTypes.IntegerType};
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1) -> col1 + 100, DataTypes.IntegerType, DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"))).collect()[0].getInt(0) == 101;
  }

  @Test
  public void temporaryAnonymous2() {
    DataFrame df = getSession().sql("select * from values(1,2) as t(a1,a2)");
    DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType};
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1, Integer col2) -> col1 + col2 + 100, input, DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"), df.col("a2"))).collect()[0].getInt(0) == 103;
  }

  @Test
  public void temporaryAnonymous3() {
    DataFrame df = getSession().sql("select * from values(1,2,3) as t(a1,a2,a3)");
    DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType};
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1, Integer col2, Integer col3) -> col1 + col2 + col3 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"))).collect()[0].getInt(0)
        == 106;
  }

  @Test
  public void temporaryAnonymous4() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4) as t(a1,a2,a3,a4)");
    DataType[] input = {
      DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1, Integer col2, Integer col3, Integer col4) ->
                    col1 + col2 + col3 + col4 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4")))
            .collect()[0]
            .getInt(0)
        == 110;
  }

  @Test
  public void temporaryAnonymous5() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4,5) as t(a1,a2,a3,a4,a5)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1, Integer col2, Integer col3, Integer col4, Integer col5) ->
                    col1 + col2 + col3 + col4 + col5 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4"), df.col("a5")))
            .collect()[0]
            .getInt(0)
        == 115;
  }

  @Test
  public void temporaryAnonymous6() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4,5,6) as t(a1,a2,a3,a4,a5,a6)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6) -> col1 + col2 + col3 + col4 + col5 + col6 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6")))
            .collect()[0]
            .getInt(0)
        == 121;
  }

  @Test
  public void temporaryAnonymous7() {
    DataFrame df =
        getSession().sql("select * from values(1,2,3,4,5,6,7) as t(a1,a2,a3,a4,a5,a6,a7)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7")))
            .collect()[0]
            .getInt(0)
        == 128;
  }

  @Test
  public void temporaryAnonymous8() {
    DataFrame df =
        getSession().sql("select * from values(1,2,3,4,5,6,7,8) as t(a1,a2,a3,a4,a5,a6,a7,a8)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8")))
            .collect()[0]
            .getInt(0)
        == 136;
  }

  @Test
  public void temporaryAnonymous9() {
    DataFrame df =
        getSession()
            .sql("select * from values(1,2,3,4,5,6,7,8,9) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9")))
            .collect()[0]
            .getInt(0)
        == 145;
  }

  @Test
  public void temporaryAnonymous10() {
    DataFrame df =
        getSession()
            .sql("select * from values(1,2,3,4,5,6,7,8,9,10) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10")))
            .collect()[0]
            .getInt(0)
        == 155;
  }

  @Test
  public void temporaryAnonymous11() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11")))
            .collect()[0]
            .getInt(0)
        == 166;
  }

  @Test
  public void temporaryAnonymous12() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12")))
            .collect()[0]
            .getInt(0)
        == 178;
  }

  @Test
  public void temporaryAnonymous13() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13")))
            .collect()[0]
            .getInt(0)
        == 191;
  }

  @Test
  public void temporaryAnonymous14() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14")))
            .collect()[0]
            .getInt(0)
        == 205;
  }

  @Test
  public void temporaryAnonymous15() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15")))
            .collect()[0]
            .getInt(0)
        == 220;
  }

  @Test
  public void temporaryAnonymous16() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16")))
            .collect()[0]
            .getInt(0)
        == 236;
  }

  @Test
  public void temporaryAnonymous17() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17")))
            .collect()[0]
            .getInt(0)
        == 253;
  }

  @Test
  public void temporaryAnonymous18() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18")))
            .collect()[0]
            .getInt(0)
        == 271;
  }

  @Test
  public void temporaryAnonymous19() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19")))
            .collect()[0]
            .getInt(0)
        == 290;
  }

  @Test
  public void temporaryAnonymous20() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19,
                    Integer col20) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                        + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20")))
            .collect()[0]
            .getInt(0)
        == 310;
  }

  @Test
  public void temporaryAnonymous21() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19,
                    Integer col20,
                    Integer col21) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                        + col21 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21")))
            .collect()[0]
            .getInt(0)
        == 331;
  }

  @Test
  public void temporaryAnonymous22() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19,
                    Integer col20,
                    Integer col21,
                    Integer col22) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                        + col21 + col22 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21"),
                    df.col("a22")))
            .collect()[0]
            .getInt(0)
        == 353;
  }

  @Test
  public void temporary0() {
    DataFrame df = getSession().sql("select * from values(1) as t(a)");
    String name = randomName();
    UserDefinedFunction udf =
        getSession().udf().registerTemporary(name, () -> 100, DataTypes.IntegerType);
    assert df.select(Functions.callUDF(name)).collect()[0].getInt(0) == 100;
    assert df.select(udf.apply()).collect()[0].getInt(0) == 100;
  }

  //  Code below for test 1-22 generated by this script

  //  (1 to 22).foreach { x =>
  //    val data = (1 to x).map(i => s"$i").mkString(",")
  //    val colNames = (1 to x).map(i => s"a$i").mkString(",")
  //    val args = (1 to x).map(i => s"Integer col$i").mkString(", ")
  //    val func = (1 to x).map(i => s"col$i").mkString(""," + ", "+ 100")
  //    val input = (1 to x).map(_ => "DataTypes.IntegerType").mkString("{", ", ", "}")
  //    val types = x match {
  //      case 1 => "DataTypes.IntegerType"
  //      case _ => "input"
  //    }
  //    val select = (1 to x).map(i => s"""df.col("a$i")""").mkString(",")
  //    val result = 100 + (1 to x).reduce(_ + _)
  //    println(s"""
  //    |@Test
  //    |public void temporary$x() {
  //    |  DataFrame df = session.sql("select * from values($data) as t($colNames)");
  //    |  DataType[] input = $input;
  //    |  String name = randomName();
  //    |  UserDefinedFunction udf = session.udf()
  //    |    .registerTemporary(name, ($args) -> $func, $types, DataTypes.IntegerType);
  //    |  assert df.select(Functions.callUDF(name, $select)).collect()[0].getInt(0) == $result;
  //    |  assert df.select(udf.apply($select)).collect()[0].getInt(0) == $result;
  //    |}""".stripMargin)
  //  }

  @Test
  public void temporary1() {
    DataFrame df = getSession().sql("select * from values(1) as t(a1)");
    DataType[] input = {DataTypes.IntegerType};
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name, (Integer col1) -> col1 + 100, DataTypes.IntegerType, DataTypes.IntegerType);
    assert df.select(Functions.callUDF(name, df.col("a1"))).collect()[0].getInt(0) == 101;
    assert df.select(udf.apply(df.col("a1"))).collect()[0].getInt(0) == 101;
  }

  @Test
  public void temporary2() {
    DataFrame df = getSession().sql("select * from values(1,2) as t(a1,a2)");
    DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType};
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1, Integer col2) -> col1 + col2 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(Functions.callUDF(name, df.col("a1"), df.col("a2"))).collect()[0].getInt(0)
        == 103;
    assert df.select(udf.apply(df.col("a1"), df.col("a2"))).collect()[0].getInt(0) == 103;
  }

  @Test
  public void temporary3() {
    DataFrame df = getSession().sql("select * from values(1,2,3) as t(a1,a2,a3)");
    DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType};
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1, Integer col2, Integer col3) -> col1 + col2 + col3 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(Functions.callUDF(name, df.col("a1"), df.col("a2"), df.col("a3")))
            .collect()[0]
            .getInt(0)
        == 106;
    assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"))).collect()[0].getInt(0)
        == 106;
  }

  @Test
  public void temporary4() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4) as t(a1,a2,a3,a4)");
    DataType[] input = {
      DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1, Integer col2, Integer col3, Integer col4) ->
                    col1 + col2 + col3 + col4 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(name, df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4")))
            .collect()[0]
            .getInt(0)
        == 110;
    assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4")))
            .collect()[0]
            .getInt(0)
        == 110;
  }

  @Test
  public void temporary5() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4,5) as t(a1,a2,a3,a4,a5)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1, Integer col2, Integer col3, Integer col4, Integer col5) ->
                    col1 + col2 + col3 + col4 + col5 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name, df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4"), df.col("a5")))
            .collect()[0]
            .getInt(0)
        == 115;
    assert df.select(
                udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4"), df.col("a5")))
            .collect()[0]
            .getInt(0)
        == 115;
  }

  @Test
  public void temporary6() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4,5,6) as t(a1,a2,a3,a4,a5,a6)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6) -> col1 + col2 + col3 + col4 + col5 + col6 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6")))
            .collect()[0]
            .getInt(0)
        == 121;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6")))
            .collect()[0]
            .getInt(0)
        == 121;
  }

  @Test
  public void temporary7() {
    DataFrame df =
        getSession().sql("select * from values(1,2,3,4,5,6,7) as t(a1,a2,a3,a4,a5,a6,a7)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7")))
            .collect()[0]
            .getInt(0)
        == 128;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7")))
            .collect()[0]
            .getInt(0)
        == 128;
  }

  @Test
  public void temporary8() {
    DataFrame df =
        getSession().sql("select * from values(1,2,3,4,5,6,7,8) as t(a1,a2,a3,a4,a5,a6,a7,a8)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8")))
            .collect()[0]
            .getInt(0)
        == 136;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8")))
            .collect()[0]
            .getInt(0)
        == 136;
  }

  @Test
  public void temporary9() {
    DataFrame df =
        getSession()
            .sql("select * from values(1,2,3,4,5,6,7,8,9) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9")))
            .collect()[0]
            .getInt(0)
        == 145;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9")))
            .collect()[0]
            .getInt(0)
        == 145;
  }

  @Test
  public void temporary10() {
    DataFrame df =
        getSession()
            .sql("select * from values(1,2,3,4,5,6,7,8,9,10) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10")))
            .collect()[0]
            .getInt(0)
        == 155;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10")))
            .collect()[0]
            .getInt(0)
        == 155;
  }

  @Test
  public void temporary11() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11")))
            .collect()[0]
            .getInt(0)
        == 166;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11")))
            .collect()[0]
            .getInt(0)
        == 166;
  }

  @Test
  public void temporary12() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12")))
            .collect()[0]
            .getInt(0)
        == 178;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12")))
            .collect()[0]
            .getInt(0)
        == 178;
  }

  @Test
  public void temporary13() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13")))
            .collect()[0]
            .getInt(0)
        == 191;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13")))
            .collect()[0]
            .getInt(0)
        == 191;
  }

  @Test
  public void temporary14() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14")))
            .collect()[0]
            .getInt(0)
        == 205;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14")))
            .collect()[0]
            .getInt(0)
        == 205;
  }

  @Test
  public void temporary15() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15")))
            .collect()[0]
            .getInt(0)
        == 220;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15")))
            .collect()[0]
            .getInt(0)
        == 220;
  }

  @Test
  public void temporary16() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16")))
            .collect()[0]
            .getInt(0)
        == 236;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16")))
            .collect()[0]
            .getInt(0)
        == 236;
  }

  @Test
  public void temporary17() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17")))
            .collect()[0]
            .getInt(0)
        == 253;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17")))
            .collect()[0]
            .getInt(0)
        == 253;
  }

  @Test
  public void temporary18() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18")))
            .collect()[0]
            .getInt(0)
        == 271;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18")))
            .collect()[0]
            .getInt(0)
        == 271;
  }

  @Test
  public void temporary19() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19")))
            .collect()[0]
            .getInt(0)
        == 290;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19")))
            .collect()[0]
            .getInt(0)
        == 290;
  }

  @Test
  public void temporary20() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19,
                    Integer col20) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                        + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20")))
            .collect()[0]
            .getInt(0)
        == 310;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20")))
            .collect()[0]
            .getInt(0)
        == 310;
  }

  @Test
  public void temporary21() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19,
                    Integer col20,
                    Integer col21) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                        + col21 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21")))
            .collect()[0]
            .getInt(0)
        == 331;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21")))
            .collect()[0]
            .getInt(0)
        == 331;
  }

  @Test
  public void temporary22() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    String name = randomName();
    UserDefinedFunction udf =
        getSession()
            .udf()
            .registerTemporary(
                name,
                (Integer col1,
                    Integer col2,
                    Integer col3,
                    Integer col4,
                    Integer col5,
                    Integer col6,
                    Integer col7,
                    Integer col8,
                    Integer col9,
                    Integer col10,
                    Integer col11,
                    Integer col12,
                    Integer col13,
                    Integer col14,
                    Integer col15,
                    Integer col16,
                    Integer col17,
                    Integer col18,
                    Integer col19,
                    Integer col20,
                    Integer col21,
                    Integer col22) ->
                    col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                        + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                        + col21 + col22 + 100,
                input,
                DataTypes.IntegerType);
    assert df.select(
                Functions.callUDF(
                    name,
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21"),
                    df.col("a22")))
            .collect()[0]
            .getInt(0)
        == 353;
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21"),
                    df.col("a22")))
            .collect()[0]
            .getInt(0)
        == 353;
  }

  @Test
  public void permanent0() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df = getSession().sql("select * from values(1) as t(a)");
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(funcName, () -> 100, DataTypes.IntegerType, stageName);
      assert df.select(Functions.callUDF(funcName)).collect()[0].getInt(0) == 100;
      assert df.select(udf.apply()).collect()[0].getInt(0) == 100;
    } finally {
      dropStage(stageName);
      getSession().sql("drop function " + funcName + "()").collect();
    }
  }

  //  Code below for test 1-22 generated by this script

  // (1 to 22).foreach { x =>
  //    val data = (1 to x).map(i => s"$i").mkString(",")
  //    val colNames = (1 to x).map(i => s"a$i").mkString(",")
  //    val args = (1 to x).map(i => s"Integer col$i").mkString(", ")
  //    val func = (1 to x).map(i => s"col$i").mkString(""," + ", "+ 100")
  //    val input = (1 to x).map(_ => "DataTypes.IntegerType").mkString("{", ", ", "}")
  //    val types = x match {
  //      case 1 => "DataTypes.IntegerType"
  //      case _ => "input"
  //    }
  //    val select = (1 to x).map(i => s"""df.col("a$i")""").mkString(",")
  //    val result = 100 + (1 to x).reduce(_ + _)
  //    val ints = (1 to x).map(_ => "INT").mkString(", ")
  //    println(s"""
  //  |@Test
  //  |public void permanent$x() {
  //  |  String funcName = randomName();
  //  |  String stageName = randomName();
  //  |  try {
  //  |    createStage(stageName, false);
  //  |    DataFrame df = session.sql("select * from values($data) as t($colNames)");
  //  |    DataType[] input = $input;
  //  |    UserDefinedFunction udf =
  //  |      session.udf().registerPermanent(funcName, ($args) -> $func, $types,
  //  | DataTypes.IntegerType, stageName);
  //  |    assert df.select(Functions.callUDF(funcName, $select)).collect()[0].getInt(0) == $result;
  //  |    assert df.select(udf.apply($select)).collect()[0].getInt(0) == $result;
  //  |  } finally {
  //  |    dropStage(stageName);
  //  |    session.sql("drop function if exists " + funcName + "($ints)").collect();
  //  |  }
  //  |}""".stripMargin)
  //  }

  @Test
  public void permanent1() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df = getSession().sql("select * from values(1) as t(a1)");
      DataType[] input = {DataTypes.IntegerType};
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1) -> col1 + 100,
                  DataTypes.IntegerType,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(Functions.callUDF(funcName, df.col("a1"))).collect()[0].getInt(0) == 101;
      assert df.select(udf.apply(df.col("a1"))).collect()[0].getInt(0) == 101;
    } finally {
      dropStage(stageName);
      getSession().sql("drop function if exists " + funcName + "(INT)").collect();
    }
  }

  @Test
  public void permanent2() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df = getSession().sql("select * from values(1,2) as t(a1,a2)");
      DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType};
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1, Integer col2) -> col1 + col2 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(Functions.callUDF(funcName, df.col("a1"), df.col("a2")))
              .collect()[0]
              .getInt(0)
          == 103;
      assert df.select(udf.apply(df.col("a1"), df.col("a2"))).collect()[0].getInt(0) == 103;
    } finally {
      dropStage(stageName);
      getSession().sql("drop function if exists " + funcName + "(INT, INT)").collect();
    }
  }

  @Test
  public void permanent3() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df = getSession().sql("select * from values(1,2,3) as t(a1,a2,a3)");
      DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType};
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1, Integer col2, Integer col3) -> col1 + col2 + col3 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(Functions.callUDF(funcName, df.col("a1"), df.col("a2"), df.col("a3")))
              .collect()[0]
              .getInt(0)
          == 106;
      assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"))).collect()[0].getInt(0)
          == 106;
    } finally {
      dropStage(stageName);
      getSession().sql("drop function if exists " + funcName + "(INT, INT, INT)").collect();
    }
  }

  @Test
  public void permanent4() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df = getSession().sql("select * from values(1,2,3,4) as t(a1,a2,a3,a4)");
      DataType[] input = {
        DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1, Integer col2, Integer col3, Integer col4) ->
                      col1 + col2 + col3 + col4 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName, df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4")))
              .collect()[0]
              .getInt(0)
          == 110;
      assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4")))
              .collect()[0]
              .getInt(0)
          == 110;
    } finally {
      dropStage(stageName);
      getSession().sql("drop function if exists " + funcName + "(INT, INT, INT, INT)").collect();
    }
  }

  @Test
  public void permanent5() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df = getSession().sql("select * from values(1,2,3,4,5) as t(a1,a2,a3,a4,a5)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1, Integer col2, Integer col3, Integer col4, Integer col5) ->
                      col1 + col2 + col3 + col4 + col5 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5")))
              .collect()[0]
              .getInt(0)
          == 115;
      assert df.select(
                  udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4"), df.col("a5")))
              .collect()[0]
              .getInt(0)
          == 115;
    } finally {
      dropStage(stageName);
      getSession()
          .sql("drop function if exists " + funcName + "(INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent6() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df = getSession().sql("select * from values(1,2,3,4,5,6) as t(a1,a2,a3,a4,a5,a6)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6) -> col1 + col2 + col3 + col4 + col5 + col6 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6")))
              .collect()[0]
              .getInt(0)
          == 121;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6")))
              .collect()[0]
              .getInt(0)
          == 121;
    } finally {
      dropStage(stageName);
      getSession()
          .sql("drop function if exists " + funcName + "(INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent7() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession().sql("select * from values(1,2,3,4,5,6,7) as t(a1,a2,a3,a4,a5,a6,a7)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7")))
              .collect()[0]
              .getInt(0)
          == 128;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7")))
              .collect()[0]
              .getInt(0)
          == 128;
    } finally {
      dropStage(stageName);
      getSession()
          .sql("drop function if exists " + funcName + "(INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent8() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession().sql("select * from values(1,2,3,4,5,6,7,8) as t(a1,a2,a3,a4,a5,a6,a7,a8)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8")))
              .collect()[0]
              .getInt(0)
          == 136;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8")))
              .collect()[0]
              .getInt(0)
          == 136;
    } finally {
      dropStage(stageName);
      getSession()
          .sql("drop function if exists " + funcName + "(INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent9() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql("select * from values(1,2,3,4,5,6,7,8,9) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9")))
              .collect()[0]
              .getInt(0)
          == 145;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9")))
              .collect()[0]
              .getInt(0)
          == 145;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent10() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10")))
              .collect()[0]
              .getInt(0)
          == 155;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10")))
              .collect()[0]
              .getInt(0)
          == 155;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent11() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11")))
              .collect()[0]
              .getInt(0)
          == 166;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11")))
              .collect()[0]
              .getInt(0)
          == 166;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent12() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12")))
              .collect()[0]
              .getInt(0)
          == 178;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12")))
              .collect()[0]
              .getInt(0)
          == 178;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent13() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13")))
              .collect()[0]
              .getInt(0)
          == 191;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13")))
              .collect()[0]
              .getInt(0)
          == 191;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent14() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14")))
              .collect()[0]
              .getInt(0)
          == 205;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14")))
              .collect()[0]
              .getInt(0)
          == 205;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent15() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15")))
              .collect()[0]
              .getInt(0)
          == 220;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15")))
              .collect()[0]
              .getInt(0)
          == 220;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent16() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15,
                      Integer col16) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + col16 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16")))
              .collect()[0]
              .getInt(0)
          == 236;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16")))
              .collect()[0]
              .getInt(0)
          == 236;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent17() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15,
                      Integer col16,
                      Integer col17) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + col16 + col17 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17")))
              .collect()[0]
              .getInt(0)
          == 253;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17")))
              .collect()[0]
              .getInt(0)
          == 253;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent18() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15,
                      Integer col16,
                      Integer col17,
                      Integer col18) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + col16 + col17 + col18 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18")))
              .collect()[0]
              .getInt(0)
          == 271;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18")))
              .collect()[0]
              .getInt(0)
          == 271;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent19() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15,
                      Integer col16,
                      Integer col17,
                      Integer col18,
                      Integer col19) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19")))
              .collect()[0]
              .getInt(0)
          == 290;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19")))
              .collect()[0]
              .getInt(0)
          == 290;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent20() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15,
                      Integer col16,
                      Integer col17,
                      Integer col18,
                      Integer col19,
                      Integer col20) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                          + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19"),
                      df.col("a20")))
              .collect()[0]
              .getInt(0)
          == 310;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19"),
                      df.col("a20")))
              .collect()[0]
              .getInt(0)
          == 310;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent21() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15,
                      Integer col16,
                      Integer col17,
                      Integer col18,
                      Integer col19,
                      Integer col20,
                      Integer col21) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                          + col21 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19"),
                      df.col("a20"),
                      df.col("a21")))
              .collect()[0]
              .getInt(0)
          == 331;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19"),
                      df.col("a20"),
                      df.col("a21")))
              .collect()[0]
              .getInt(0)
          == 331;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void permanent22() {
    String funcName = randomName();
    String stageName = randomName();
    try {
      createStage(stageName, false);
      DataFrame df =
          getSession()
              .sql(
                  "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22)");
      DataType[] input = {
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType,
        DataTypes.IntegerType
      };
      UserDefinedFunction udf =
          getSession()
              .udf()
              .registerPermanent(
                  funcName,
                  (Integer col1,
                      Integer col2,
                      Integer col3,
                      Integer col4,
                      Integer col5,
                      Integer col6,
                      Integer col7,
                      Integer col8,
                      Integer col9,
                      Integer col10,
                      Integer col11,
                      Integer col12,
                      Integer col13,
                      Integer col14,
                      Integer col15,
                      Integer col16,
                      Integer col17,
                      Integer col18,
                      Integer col19,
                      Integer col20,
                      Integer col21,
                      Integer col22) ->
                      col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11
                          + col12 + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20
                          + col21 + col22 + 100,
                  input,
                  DataTypes.IntegerType,
                  stageName);
      assert df.select(
                  Functions.callUDF(
                      funcName,
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19"),
                      df.col("a20"),
                      df.col("a21"),
                      df.col("a22")))
              .collect()[0]
              .getInt(0)
          == 353;
      assert df.select(
                  udf.apply(
                      df.col("a1"),
                      df.col("a2"),
                      df.col("a3"),
                      df.col("a4"),
                      df.col("a5"),
                      df.col("a6"),
                      df.col("a7"),
                      df.col("a8"),
                      df.col("a9"),
                      df.col("a10"),
                      df.col("a11"),
                      df.col("a12"),
                      df.col("a13"),
                      df.col("a14"),
                      df.col("a15"),
                      df.col("a16"),
                      df.col("a17"),
                      df.col("a18"),
                      df.col("a19"),
                      df.col("a20"),
                      df.col("a21"),
                      df.col("a22")))
              .collect()[0]
              .getInt(0)
          == 353;
    } finally {
      dropStage(stageName);
      getSession()
          .sql(
              "drop function if exists "
                  + funcName
                  + "(INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT, INT)")
          .collect();
    }
  }

  @Test
  public void udf0() {
    DataFrame df = getSession().sql("select * from values(1) as t(a)");
    UserDefinedFunction udf = Functions.udf(() -> 100, DataTypes.IntegerType);
    assert df.select(udf.apply()).collect()[0].getInt(0) == 100;
  }

  //  Code below for test 1-22 generated by this script

  //  (1 to 22).foreach { x =>
  //    val data = (1 to x).map(i => s"$i").mkString(",")
  //    val colNames = (1 to x).map(i => s"a$i").mkString(",")
  //    val args = (1 to x).map(i => s"Integer col$i").mkString(", ")
  //    val func = (1 to x).map(i => s"col$i").mkString(""," + ", "+ 100")
  //    val input = (1 to x).map(_ => "DataTypes.IntegerType").mkString("{", ", ", "}")
  //    val types = x match {
  //      case 1 => "DataTypes.IntegerType"
  //      case _ => "input"
  //    }
  //    val select = (1 to x).map(i => s"""df.col("a$i")""").mkString(",")
  //    val result = 100 + (1 to x).reduce(_ + _)
  //    println(s"""
  //    |@Test
  //    |public void udf$x() {
  //    | DataFrame df = session.sql("select * from values($data) as t($colNames)");
  //    | DataType[] input = $input;
  //    | UserDefinedFunction udf = Functions.udf(($args) -> $func, $types, DataTypes.IntegerType);
  //    | assert df.select(udf.apply($select)).collect()[0].getInt(0) == $result;
  //    |}""".stripMargin)
  //  }

  @Test
  public void udf1() {
    DataFrame df = getSession().sql("select * from values(1) as t(a1)");
    DataType[] input = {DataTypes.IntegerType};
    UserDefinedFunction udf =
        Functions.udf((Integer col1) -> col1 + 100, DataTypes.IntegerType, DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"))).collect()[0].getInt(0) == 101;
  }

  @Test
  public void udf2() {
    DataFrame df = getSession().sql("select * from values(1,2) as t(a1,a2)");
    DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType};
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1, Integer col2) -> col1 + col2 + 100, input, DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"), df.col("a2"))).collect()[0].getInt(0) == 103;
  }

  @Test
  public void udf3() {
    DataFrame df = getSession().sql("select * from values(1,2,3) as t(a1,a2,a3)");
    DataType[] input = {DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType};
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1, Integer col2, Integer col3) -> col1 + col2 + col3 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"))).collect()[0].getInt(0)
        == 106;
  }

  @Test
  public void udf4() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4) as t(a1,a2,a3,a4)");
    DataType[] input = {
      DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType, DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1, Integer col2, Integer col3, Integer col4) ->
                col1 + col2 + col3 + col4 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4")))
            .collect()[0]
            .getInt(0)
        == 110;
  }

  @Test
  public void udf5() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4,5) as t(a1,a2,a3,a4,a5)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1, Integer col2, Integer col3, Integer col4, Integer col5) ->
                col1 + col2 + col3 + col4 + col5 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(df.col("a1"), df.col("a2"), df.col("a3"), df.col("a4"), df.col("a5")))
            .collect()[0]
            .getInt(0)
        == 115;
  }

  @Test
  public void udf6() {
    DataFrame df = getSession().sql("select * from values(1,2,3,4,5,6) as t(a1,a2,a3,a4,a5,a6)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1, Integer col2, Integer col3, Integer col4, Integer col5, Integer col6) ->
                col1 + col2 + col3 + col4 + col5 + col6 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6")))
            .collect()[0]
            .getInt(0)
        == 121;
  }

  @Test
  public void udf7() {
    DataFrame df =
        getSession().sql("select * from values(1,2,3,4,5,6,7) as t(a1,a2,a3,a4,a5,a6,a7)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7")))
            .collect()[0]
            .getInt(0)
        == 128;
  }

  @Test
  public void udf8() {
    DataFrame df =
        getSession().sql("select * from values(1,2,3,4,5,6,7,8) as t(a1,a2,a3,a4,a5,a6,a7,a8)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8")))
            .collect()[0]
            .getInt(0)
        == 136;
  }

  @Test
  public void udf9() {
    DataFrame df =
        getSession()
            .sql("select * from values(1,2,3,4,5,6,7,8,9) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9) -> col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9")))
            .collect()[0]
            .getInt(0)
        == 145;
  }

  @Test
  public void udf10() {
    DataFrame df =
        getSession()
            .sql("select * from values(1,2,3,4,5,6,7,8,9,10) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10")))
            .collect()[0]
            .getInt(0)
        == 155;
  }

  @Test
  public void udf11() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11")))
            .collect()[0]
            .getInt(0)
        == 166;
  }

  @Test
  public void udf12() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12")))
            .collect()[0]
            .getInt(0)
        == 178;
  }

  @Test
  public void udf13() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13")))
            .collect()[0]
            .getInt(0)
        == 191;
  }

  @Test
  public void udf14() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14")))
            .collect()[0]
            .getInt(0)
        == 205;
  }

  @Test
  public void udf15() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15")))
            .collect()[0]
            .getInt(0)
        == 220;
  }

  @Test
  public void udf16() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15,
                Integer col16) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + col16 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16")))
            .collect()[0]
            .getInt(0)
        == 236;
  }

  @Test
  public void udf17() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15,
                Integer col16,
                Integer col17) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + col16 + col17 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17")))
            .collect()[0]
            .getInt(0)
        == 253;
  }

  @Test
  public void udf18() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15,
                Integer col16,
                Integer col17,
                Integer col18) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + col16 + col17 + col18 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18")))
            .collect()[0]
            .getInt(0)
        == 271;
  }

  @Test
  public void udf19() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15,
                Integer col16,
                Integer col17,
                Integer col18,
                Integer col19) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + col16 + col17 + col18 + col19 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19")))
            .collect()[0]
            .getInt(0)
        == 290;
  }

  @Test
  public void udf20() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15,
                Integer col16,
                Integer col17,
                Integer col18,
                Integer col19,
                Integer col20) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20")))
            .collect()[0]
            .getInt(0)
        == 310;
  }

  @Test
  public void udf21() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15,
                Integer col16,
                Integer col17,
                Integer col18,
                Integer col19,
                Integer col20,
                Integer col21) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20 + col21 + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21")))
            .collect()[0]
            .getInt(0)
        == 331;
  }

  @Test
  public void udf22() {
    DataFrame df =
        getSession()
            .sql(
                "select * from values(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22) as t(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16,a17,a18,a19,a20,a21,a22)");
    DataType[] input = {
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType,
      DataTypes.IntegerType
    };
    UserDefinedFunction udf =
        Functions.udf(
            (Integer col1,
                Integer col2,
                Integer col3,
                Integer col4,
                Integer col5,
                Integer col6,
                Integer col7,
                Integer col8,
                Integer col9,
                Integer col10,
                Integer col11,
                Integer col12,
                Integer col13,
                Integer col14,
                Integer col15,
                Integer col16,
                Integer col17,
                Integer col18,
                Integer col19,
                Integer col20,
                Integer col21,
                Integer col22) ->
                col1 + col2 + col3 + col4 + col5 + col6 + col7 + col8 + col9 + col10 + col11 + col12
                    + col13 + col14 + col15 + col16 + col17 + col18 + col19 + col20 + col21 + col22
                    + 100,
            input,
            DataTypes.IntegerType);
    assert df.select(
                udf.apply(
                    df.col("a1"),
                    df.col("a2"),
                    df.col("a3"),
                    df.col("a4"),
                    df.col("a5"),
                    df.col("a6"),
                    df.col("a7"),
                    df.col("a8"),
                    df.col("a9"),
                    df.col("a10"),
                    df.col("a11"),
                    df.col("a12"),
                    df.col("a13"),
                    df.col("a14"),
                    df.col("a15"),
                    df.col("a16"),
                    df.col("a17"),
                    df.col("a18"),
                    df.col("a19"),
                    df.col("a20"),
                    df.col("a21"),
                    df.col("a22")))
            .collect()[0]
            .getInt(0)
        == 353;
  }
}
